// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MvpClient is the client API for Mvp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MvpClient interface {
	AddGood(ctx context.Context, in *AddGoodReq, opts ...grpc.CallOption) (*AddGoodRes, error)
	AddBilliardDesk(ctx context.Context, in *AddBilliardDeskReq, opts ...grpc.CallOption) (*AddBilliardDeskRes, error)
	SellGood(ctx context.Context, in *SellGoodReq, opts ...grpc.CallOption) (*SellGoodRes, error)
	BeginPlayBilliard(ctx context.Context, in *BeginPlayBilliardReq, opts ...grpc.CallOption) (*BeginPlayBilliardRes, error)
	StopPlayBilliard(ctx context.Context, in *StopPlayBilliardReq, opts ...grpc.CallOption) (*StopPlayBilliardRes, error)
	Order(ctx context.Context, in *OrderReq, opts ...grpc.CallOption) (*OrderRes, error)
	GetOrderGoods(ctx context.Context, in *GetOrderGoodsReq, opts ...grpc.CallOption) (*GetOrderGoodsRes, error)
	AddGoodType(ctx context.Context, in *AddGoodTypeReq, opts ...grpc.CallOption) (*AddGoodTypeRes, error)
	Checkout(ctx context.Context, in *CheckoutReq, opts ...grpc.CallOption) (*CheckoutRes, error)
	AddOptionClass(ctx context.Context, in *AddOptionClassReq, opts ...grpc.CallOption) (*AddOptionClassRes, error)
}

type mvpClient struct {
	cc grpc.ClientConnInterface
}

func NewMvpClient(cc grpc.ClientConnInterface) MvpClient {
	return &mvpClient{cc}
}

func (c *mvpClient) AddGood(ctx context.Context, in *AddGoodReq, opts ...grpc.CallOption) (*AddGoodRes, error) {
	out := new(AddGoodRes)
	err := c.cc.Invoke(ctx, "/pb.Mvp/AddGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mvpClient) AddBilliardDesk(ctx context.Context, in *AddBilliardDeskReq, opts ...grpc.CallOption) (*AddBilliardDeskRes, error) {
	out := new(AddBilliardDeskRes)
	err := c.cc.Invoke(ctx, "/pb.Mvp/AddBilliardDesk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mvpClient) SellGood(ctx context.Context, in *SellGoodReq, opts ...grpc.CallOption) (*SellGoodRes, error) {
	out := new(SellGoodRes)
	err := c.cc.Invoke(ctx, "/pb.Mvp/SellGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mvpClient) BeginPlayBilliard(ctx context.Context, in *BeginPlayBilliardReq, opts ...grpc.CallOption) (*BeginPlayBilliardRes, error) {
	out := new(BeginPlayBilliardRes)
	err := c.cc.Invoke(ctx, "/pb.Mvp/BeginPlayBilliard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mvpClient) StopPlayBilliard(ctx context.Context, in *StopPlayBilliardReq, opts ...grpc.CallOption) (*StopPlayBilliardRes, error) {
	out := new(StopPlayBilliardRes)
	err := c.cc.Invoke(ctx, "/pb.Mvp/StopPlayBilliard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mvpClient) Order(ctx context.Context, in *OrderReq, opts ...grpc.CallOption) (*OrderRes, error) {
	out := new(OrderRes)
	err := c.cc.Invoke(ctx, "/pb.Mvp/Order", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mvpClient) GetOrderGoods(ctx context.Context, in *GetOrderGoodsReq, opts ...grpc.CallOption) (*GetOrderGoodsRes, error) {
	out := new(GetOrderGoodsRes)
	err := c.cc.Invoke(ctx, "/pb.Mvp/GetOrderGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mvpClient) AddGoodType(ctx context.Context, in *AddGoodTypeReq, opts ...grpc.CallOption) (*AddGoodTypeRes, error) {
	out := new(AddGoodTypeRes)
	err := c.cc.Invoke(ctx, "/pb.Mvp/AddGoodType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mvpClient) Checkout(ctx context.Context, in *CheckoutReq, opts ...grpc.CallOption) (*CheckoutRes, error) {
	out := new(CheckoutRes)
	err := c.cc.Invoke(ctx, "/pb.Mvp/Checkout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mvpClient) AddOptionClass(ctx context.Context, in *AddOptionClassReq, opts ...grpc.CallOption) (*AddOptionClassRes, error) {
	out := new(AddOptionClassRes)
	err := c.cc.Invoke(ctx, "/pb.Mvp/AddOptionClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MvpServer is the server API for Mvp service.
// All implementations must embed UnimplementedMvpServer
// for forward compatibility
type MvpServer interface {
	AddGood(context.Context, *AddGoodReq) (*AddGoodRes, error)
	AddBilliardDesk(context.Context, *AddBilliardDeskReq) (*AddBilliardDeskRes, error)
	SellGood(context.Context, *SellGoodReq) (*SellGoodRes, error)
	BeginPlayBilliard(context.Context, *BeginPlayBilliardReq) (*BeginPlayBilliardRes, error)
	StopPlayBilliard(context.Context, *StopPlayBilliardReq) (*StopPlayBilliardRes, error)
	Order(context.Context, *OrderReq) (*OrderRes, error)
	GetOrderGoods(context.Context, *GetOrderGoodsReq) (*GetOrderGoodsRes, error)
	AddGoodType(context.Context, *AddGoodTypeReq) (*AddGoodTypeRes, error)
	Checkout(context.Context, *CheckoutReq) (*CheckoutRes, error)
	AddOptionClass(context.Context, *AddOptionClassReq) (*AddOptionClassRes, error)
	mustEmbedUnimplementedMvpServer()
}

// UnimplementedMvpServer must be embedded to have forward compatible implementations.
type UnimplementedMvpServer struct {
}

func (UnimplementedMvpServer) AddGood(context.Context, *AddGoodReq) (*AddGoodRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGood not implemented")
}
func (UnimplementedMvpServer) AddBilliardDesk(context.Context, *AddBilliardDeskReq) (*AddBilliardDeskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBilliardDesk not implemented")
}
func (UnimplementedMvpServer) SellGood(context.Context, *SellGoodReq) (*SellGoodRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellGood not implemented")
}
func (UnimplementedMvpServer) BeginPlayBilliard(context.Context, *BeginPlayBilliardReq) (*BeginPlayBilliardRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginPlayBilliard not implemented")
}
func (UnimplementedMvpServer) StopPlayBilliard(context.Context, *StopPlayBilliardReq) (*StopPlayBilliardRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopPlayBilliard not implemented")
}
func (UnimplementedMvpServer) Order(context.Context, *OrderReq) (*OrderRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Order not implemented")
}
func (UnimplementedMvpServer) GetOrderGoods(context.Context, *GetOrderGoodsReq) (*GetOrderGoodsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderGoods not implemented")
}
func (UnimplementedMvpServer) AddGoodType(context.Context, *AddGoodTypeReq) (*AddGoodTypeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGoodType not implemented")
}
func (UnimplementedMvpServer) Checkout(context.Context, *CheckoutReq) (*CheckoutRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Checkout not implemented")
}
func (UnimplementedMvpServer) AddOptionClass(context.Context, *AddOptionClassReq) (*AddOptionClassRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOptionClass not implemented")
}
func (UnimplementedMvpServer) mustEmbedUnimplementedMvpServer() {}

// UnsafeMvpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MvpServer will
// result in compilation errors.
type UnsafeMvpServer interface {
	mustEmbedUnimplementedMvpServer()
}

func RegisterMvpServer(s *grpc.Server, srv MvpServer) {
	s.RegisterService(&_Mvp_serviceDesc, srv)
}

func _Mvp_AddGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGoodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MvpServer).AddGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Mvp/AddGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MvpServer).AddGood(ctx, req.(*AddGoodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mvp_AddBilliardDesk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBilliardDeskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MvpServer).AddBilliardDesk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Mvp/AddBilliardDesk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MvpServer).AddBilliardDesk(ctx, req.(*AddBilliardDeskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mvp_SellGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellGoodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MvpServer).SellGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Mvp/SellGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MvpServer).SellGood(ctx, req.(*SellGoodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mvp_BeginPlayBilliard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginPlayBilliardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MvpServer).BeginPlayBilliard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Mvp/BeginPlayBilliard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MvpServer).BeginPlayBilliard(ctx, req.(*BeginPlayBilliardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mvp_StopPlayBilliard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopPlayBilliardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MvpServer).StopPlayBilliard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Mvp/StopPlayBilliard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MvpServer).StopPlayBilliard(ctx, req.(*StopPlayBilliardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mvp_Order_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MvpServer).Order(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Mvp/Order",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MvpServer).Order(ctx, req.(*OrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mvp_GetOrderGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderGoodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MvpServer).GetOrderGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Mvp/GetOrderGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MvpServer).GetOrderGoods(ctx, req.(*GetOrderGoodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mvp_AddGoodType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGoodTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MvpServer).AddGoodType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Mvp/AddGoodType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MvpServer).AddGoodType(ctx, req.(*AddGoodTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mvp_Checkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MvpServer).Checkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Mvp/Checkout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MvpServer).Checkout(ctx, req.(*CheckoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mvp_AddOptionClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOptionClassReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MvpServer).AddOptionClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Mvp/AddOptionClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MvpServer).AddOptionClass(ctx, req.(*AddOptionClassReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mvp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Mvp",
	HandlerType: (*MvpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddGood",
			Handler:    _Mvp_AddGood_Handler,
		},
		{
			MethodName: "AddBilliardDesk",
			Handler:    _Mvp_AddBilliardDesk_Handler,
		},
		{
			MethodName: "SellGood",
			Handler:    _Mvp_SellGood_Handler,
		},
		{
			MethodName: "BeginPlayBilliard",
			Handler:    _Mvp_BeginPlayBilliard_Handler,
		},
		{
			MethodName: "StopPlayBilliard",
			Handler:    _Mvp_StopPlayBilliard_Handler,
		},
		{
			MethodName: "Order",
			Handler:    _Mvp_Order_Handler,
		},
		{
			MethodName: "GetOrderGoods",
			Handler:    _Mvp_GetOrderGoods_Handler,
		},
		{
			MethodName: "AddGoodType",
			Handler:    _Mvp_AddGoodType_Handler,
		},
		{
			MethodName: "Checkout",
			Handler:    _Mvp_Checkout_Handler,
		},
		{
			MethodName: "AddOptionClass",
			Handler:    _Mvp_AddOptionClass_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/pb/mvp.proto",
}
